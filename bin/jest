#!/usr/bin/env julia

import DocOpt: docopt
@require ".." test reporter deferred_tests @assert @assert_throws @catch
@require "emitter" on emit

const usage = """

Usage:
  jest [--reporter=<name>] <file>...
  jest -h | --help
  jest -v | --version

Options:
  -h --help     Show this screen
  -v --version  Show version
  -r --reporter Select a custom reporter

"""

args = docopt(usage, version=v"0.0.0")


if args["--reporter"] == nothing
  args["--reporter"] = "dot"
end

handlers = args["--reporter"]

on(reporter, Requirer.require("../reporters/$handlers").reporter)

fails = 0

on(reporter, "after test") do result
  global fails += !result.pass
end

emit(reporter, "before all")

try
  for file in args["<file>"]
    file = joinpath(pwd(), file)
    Requirer.require(file; [
      symbol("@assert_throws") => eval(symbol("@assert_throws")),
      symbol("@assert") => eval(symbol("@assert")),
      symbol("@catch") => eval(symbol("@catch")),
      :test => test
    ]...)
  end

  for task in deferred_tests
    wait(task)
  end
  emit(reporter, "after all")
catch e
  emit(reporter, "error", e)
  rethrow(e)
end

# exit with correct error code
exit(fails)
